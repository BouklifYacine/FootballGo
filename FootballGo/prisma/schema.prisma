// Choisir votre BDD ici 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Utilisateur Model
model User {
  id               String          @id @default(cuid())
  name             String?         @unique
  email            String?         @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             Roles           @default(utilisateur)
  resetToken       String?
  resetTokenExpiry DateTime?
  accounts         Account[]
  sessions         Session[]
  abonnement       Abonnement?
  plan             Plan            @default(free)
  clientId         String?         @unique
  Authenticator    Authenticator[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  // Relations pour FootballConnect
  membreEquipes    MembreEquipe[]
  presences        Presence[]
  statsJoueur      StatistiqueJoueur[]
}

// Stripe Model
model Abonnement {
  id        String         @id @default(cuid())
  userId    String         @unique
  plan      Plan
  periode   PlanAbonnement
  datedebut DateTime       @default(now())
  datefin   DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
}

// Enum des roles 
enum Roles {
  Admin
  utilisateur
}

// Stripe Enum des noms de vos type d'abonnement en rajouter si besoin 
enum Plan {
  free
  pro
}

// Stripe Model ou vous allez gérer vos type d'abonnement 
enum PlanAbonnement {
  mois
  année
}

// Account Model pour AuthJS
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Session Model pour récupérer les tokens si besoin 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Modèle équipe
model Equipe {
  id            String               @id @default(cuid())
  nom           String
  description   String?
  logoUrl       String?
  dateCreation  DateTime             @default(now())
  
  // Relations
  membres       MembreEquipe[]
  evenements    Evenement[]
  statsEquipe   StatistiqueEquipe[]
}

// Relation entre utilisateurs et équipes
model MembreEquipe {
  id              String     @id @default(cuid())
  role            RoleEquipe @default(JOUEUR)
  posteJoueur     PosteJoueur? // Poste du joueur si role = JOUEUR
  dateAdhesion    DateTime   @default(now())
  
  // Relations
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  equipe          Equipe     @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  equipeId        String

  @@unique([userId, equipeId])
}

// Rôles dans l'équipe
enum RoleEquipe {
  ADMIN
  ENTRAINEUR
  ADMIN_ENTRAINEUR  // Combinaison des deux rôles
  JOUEUR
}

// Postes des joueurs
enum PosteJoueur {
  GARDIEN
  DEFENSEUR
  MILIEU
  ATTAQUANT
}

// Événement d'équipe
model Evenement {
  id              String               @id @default(cuid())
  titre           String
  description     String?
  lieu            String?
  typeEvenement   TypeEvenement        @default(ENTRAINEMENT)
  dateDebut       DateTime
  dateFin         DateTime
  dateCreation    DateTime             @default(now())
  
  // Relations
  equipe          Equipe               @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  equipeId        String
  presences       Presence[]
  statsJoueur     StatistiqueJoueur[]
  statEquipe      StatistiqueEquipe?

  @@index([equipeId])
}

// Type d'événement simplifié
enum TypeEvenement {
  MATCH
  ENTRAINEMENT
}

// Présence à un événement
model Presence {
  id              String           @id @default(cuid())
  statut          StatutPresence   @default(EN_ATTENTE)
  dateCreation    DateTime         @default(now())
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  evenement       Evenement        @relation(fields: [evenementId], references: [id], onDelete: Cascade)
  evenementId     String

  @@unique([userId, evenementId])
}

// Statut de présence
enum StatutPresence {
  EN_ATTENTE
  PRESENT
  ABSENT
  INCERTAIN
}

// Statistiques d'un joueur pour un événement
model StatistiqueJoueur {
  id                String      @id @default(cuid())
  // Statistiques individuelles principales
  buts              Int         @default(0)
  passes            Int         @default(0)
  minutesJouees     Int         @default(0)
  cartonJaune       Int         @default(0)
  cartonRouge       Int         @default(0)
  note              Float?      // Note globale sur 10
  
  titulaire         Boolean     @default(false)
  poste             PosteJoueur? // Position du joueur pendant le match spécifique
  dateCreation      DateTime    @default(now())
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  evenement         Evenement   @relation(fields: [evenementId], references: [id], onDelete: Cascade)
  evenementId       String

  @@unique([userId, evenementId])
}

// Statistiques d'équipe
model StatistiqueEquipe {
  id                String        @id @default(cuid())
  // Résultats et performance d'équipe
  resultatMatch     ResultatMatch?
  butsMarques       Int           @default(0)
  butsEncaisses     Int           @default(0)
  cleanSheet        Boolean       @default(false)
  possession        Int?          // Pourcentage de possession (0-100)
  tirsTotal         Int?          // Nombre total de tirs
  tirsCadres        Int?          // Nombre de tirs cadrés
  corners           Int?          // Nombre de corners obtenus
  fautes            Int?          // Nombre de fautes commises
  
  // Contexte du match
  domicile          Boolean       @default(true)  // Match à domicile ou à l'extérieur
  competition       String?       // Type de compétition (amical, championnat, coupe)
  adversaire        String?       // Nom de l'équipe adverse
  dateCreation      DateTime      @default(now())
  
  // Relations
  equipe            Equipe        @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  equipeId          String
  evenement         Evenement?    @relation(fields: [evenementId], references: [id])
  evenementId       String?       @unique // Un événement ne peut avoir qu'une seule entrée de statistique d'équipe

  @@index([equipeId])
}

// Résultat de match
enum ResultatMatch {
  VICTOIRE
  DEFAITE
  MATCH_NUL
}